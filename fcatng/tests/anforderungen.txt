Pytest ausführen 		        : "python -m pytest test_context.py" in Konsole.
Pytest ausführen mit sichtbaren Prints  : "python -m pytest -s test_context.py" in Konsole.
Pytest ausführen, nur bestimmte Methode : "python -m pytest test_context.py - k test_get_object_intent" in Konsole.



Warum Pytest?

Pytest passt sehr gut zu den Anforderungen an das Testframework, da es ein Open-Source-Testframework ist
und somit keine Kosten anfallen. Dies ist sehr gut für das Projekt, da es keine finanzielle Unterstützung gibt.

Des Weiteren steht uns nur sehr wenig Manpower zur Verfügung, weshalb es sehr wartungsarm sein muss.
Wenn jedoch Tests für weitere Klassen/Methoden außerhalb meines Projektumfangs implementiert werden sollen,
sollte das Framework leicht und verständlich sein. All diese Anforderungen werden von pytest erfüllt,
da es ein sehr populäres Framework ist. Das heißt, es gibt viele verschiedene Informationsquellen wie z.B. Tutorials,
die frei verfügbar im Internet sind und so einen reibungslosen Einstieg in die Arbeit mit pytest ermöglichen.
Ein weiterer Vorteil der großen Community ist, dass einem bei Fragen schnell in diversen Foren geholfen werden kann.
Pytest gilt als relativ leicht zu erlernen, sodass man sich direkt auf das Testen der Software konzentrieren kann
und nicht erst viel Zeit für das Erlernen des Frameworks aufwenden muss.

Ein Nachteil von pytest ist, dass man die Testfälle nicht in anderen Testframeworks verwenden kann. Dies ist allerdings
in unserem Fall nicht schlimm, da es in meinen Augen besser ist, sich auf ein Testframework festzulegen, um den Wartungsaufwand
nicht unnötig in die Höhe schießen zu lassen.

Vorteile von pytest gegenüber unittest (pyunit):

- Einfachere Syntax:
    Pytest hat eine einfachere und lesbarere Syntax im Vergleich zu unittest.
    Man muss keine Klassen erstellen und Methoden definieren, um Tests zu schreiben. Einfache Funktionen reichen aus.
- Automatische Erkennung von Tests:
    Pytest erkennt automatisch alle Testdateien und Testfunktionen, die mit test_ beginnen,
    ohne dass man explizit etwas konfigurieren muss.
- Bessere Fehlermeldungen:
    Pytest bietet detailliertere und lesbarere Fehlermeldungen, die das Debuggen erleichtern.

Vorteile von pytest gegenüber doctest:

- Unterstützung für verschiedene Testarten:
    Mit pytest kann man nicht nur Unit-Tests, sondern auch funktionale Tests, Integrationstests
    und sogar Doctests ausführen. Es bietet eine einheitliche Schnittstelle für alle Arten von Tests.
- Einfachere Syntax:
    Pytest hat eine einfachere und lesbarere Syntax im Vergleich zu doctest. Man muss keine speziellen Kommentare schreiben,
    sondern kann einfach Python-Funktionen verwenden, um Tests zu definieren.
- Flexibilität und Erweiterbarkeit:
    Pytest ist sehr flexibel und kann durch eine Vielzahl von Plugins erweitert werden.
    Dies ermöglicht es einem, zusätzliche Funktionen wie Testabdeckung, Benchmarking und vieles mehr hinzuzufügen.

Bonus :

- Persönliche Präferenz.


Anforderungen :

- 1:
Tests müssen um beliebig viele Instanzen erweiterbar sein. Die Instanzen sollen in nur einer Datei implementiert werden und sollen von allen Test-Klassen verwendet werden können.

- 2:
Die Test-Instanzen sollen verschiedenen Aspekte abdecken. (Eine Instanz enthält viele Daten eine andere nur wenige, In einer Instanz sind die Objekte/Attribute Strings/Integer).

- 3:
Hilfsmethoden sollen von allen Test-Klassen verwendet werden können.

- 4:
Die Instanzen aus der Instanzen-Datei sollen automatisch an die Test-Methoden weitergegeben werden.

- 5:
Es sollen möglichst alle möglichen Attributausprägungen simuliert werden. (z.B. Die verschiedenen Closure Varianten).